package com.satori.rtm;

import com.satori.rtm.auth.AuthException;
import com.satori.rtm.connection.ConnectionListener;
import com.satori.rtm.model.InvalidJsonException;
import com.satori.rtm.model.PduException;
import com.satori.rtm.transport.Transport;

/**
 * Interface that defines callback methods for events in the RTM client lifecycle. For example,
 * user can define application functionality when the client connects or disconnects from the RTM Service,
 * when the connection fails, or when a WebSocket transport error, application layer error, or internal error occurs.
 * <p>
 * Set an implementation of this interface for the client with {@link RtmClientBuilder#setListener(RtmClientListener)}.
 * <p>
 * {@link RtmClientAdapter} is an empty implementation of this interface.
 *
 * @see RtmClientBuilder#setListener(RtmClientListener)
 * @see RtmClientAdapter
 */
public interface RtmClientListener {
  /**
   * Called when the RTM client fails to establish a connection to RTM.
   *
   * @param client RTM client
   * @param ex     exception generated by the WebSocket {@link Transport}
   * @see ConnectionListener#onConnectingError(Exception)
   */
  void onConnectingError(RtmClient client, Exception ex);

  /**
   * Called when a transport error occurs when communicating with RTM.
   *
   * @param client RTM client
   * @param ex     exception generated by the WebSocket {@link Transport}
   * @see ConnectionListener#onTransportError(Exception)
   */
  void onTransportError(RtmClient client, Exception ex);

  /**
   * Called when an error occurs in the application because of authentication, Protocol Data Unit (PDU) errors,
   * or JSON errors.
   * <p>
   * This method is called when one of the following exceptions occurs in the application:
   * <ul>
   * <li>{@link AuthException} - Authentication error.</li>
   * <li>{@link PduException} - Negative or unexpected PDU received from the RTM
   * Service.</li>
   * <li>{@link InvalidJsonException} - Incorrect or invalid JSON format received from
   * the RTM Service.</li>
   * </ul>
   * <p>
   * Use this method to handle the above errors.
   *
   * @param client RTM client
   * @param ex     exception generated by the application
   * @see ConnectionListener#onError(Exception)
   */
  void onError(RtmClient client, Exception ex);

  /**
   * Called when the client enters the {@code stopped} state.
   * <p>
   * The client enters the {@code stopped} state in the following situations:
   * <ul>
   * <li>{@link RtmClient} created and initialized with {@code stopped} state</li>
   * <li>{@link RtmClient#stop()} method called explicitly</li>
   * <li>auto-reconnect disabled and connection drops</li>
   * </ul>
   *
   * @param client RTM client
   */
  void onEnterStopped(RtmClient client);

  /**
   * Called when the client leaves the {@code stopped} state.
   * <p>
   * The client leaves the state when you call the {@link RtmClient#start()} method.
   *
   * @param client RTM client
   */
  void onLeaveStopped(RtmClient client);

  /**
   * Called when the client enters the {@code connecting} state.
   * <p>
   * The client enters this state when it attempts to connect to the RTM Service.
   *
   * @param client RTM client
   */
  void onEnterConnecting(RtmClient client);

  /**
   * Called when the client leaves the {@code connecting} state.
   * <p>
   * RtmClient leaves this state when it either successfully connects or fails to connect to the RTM Service.
   *
   * @param client RTM client
   */
  void onLeaveConnecting(RtmClient client);

  /**
   * Called when the client enters the {@code connected} state.
   * <p>
   * RtmClient enters this state after it has connected and authenticated to the RTM Service and is
   * able to send and receive messages.
   *
   * @param client RTM client
   */
  void onEnterConnected(RtmClient client);

  /**
   * Called when the client leaves the {@code connected} state.
   * <p>
   * The client leaves this state when the connection drops.
   *
   * @param client RTM client
   */
  void onLeaveConnected(RtmClient client);

  /**
   * Called when the client enters the {@code awaiting} state.
   * <p>
   * The client enters this state after the connection to the RTM Service fails and auto-reconnect
   * is enabled.
   *
   * @param client RTM client
   */
  void onEnterAwaiting(RtmClient client);

  /**
   * Called when the client leaves the {@code awaiting} state.
   * <p>
   * The client leaves this state when it enters the {@code connecting} state and attempts
   * to reconnect.
   *
   * @param client RTM client
   */
  void onLeaveAwaiting(RtmClient client);
}
