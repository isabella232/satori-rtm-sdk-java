plugins {
    id 'net.researchgate.release' version '2.4.0'
}

apply plugin: 'java'
apply plugin: 'maven'

def rtm_config_prop = System.getProperty('RTM_CONFIG')

String rtm_config_path = null
if (rtm_config_prop) {
    rtm_config_path = file(rtm_config_prop).getCanonicalPath()
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'signing'

    group = 'com.satori'

    task sourceJar(type: Jar) {
        classifier 'sources'
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar) {
        classifier 'javadoc'
        from javadoc
    }

    artifacts {
        archives javadocJar, sourceJar
    }

    ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    javadoc {
        options.memberLevel = JavadocMemberLevel.PUBLIC
        options.JFlags = ["-Xmx512m", '-XX:MaxPermSize=256m']
        options.header = docsHeader
    }

    tasks.withType(Test) {
        testLogging.showStandardStreams = true
        testLogging.exceptionFormat = 'full'

        minHeapSize = "128m"
        maxHeapSize = "512m"
        maxParallelForks = 1

        jvmArgs '-XX:MaxPermSize=256m'

        beforeTest { descriptor ->
            logger.lifecycle("Running test: " + descriptor)
        }

        systemProperties = [ RTM_CONFIG: rtm_config_path ]
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                pom.project {
                    url 'https://github.com/satori-com/satori-rtm-sdk-java'

                    packaging 'jar'

                    scm {
                        url 'https://github.com/satori-com/satori-rtm-sdk-java'
                        connection 'scm:git:git://github.com/satori-com/satori-rtm-sdk-java.git'
                        developerConnection 'scm:git:git@github.com:satori-com/satori-rtm-sdk-java.git'
                    }

                    licenses {
                        license {
                            name 'The BSD 3-Clause License (with patent grant)'
                            url 'https://raw.githubusercontent.com/satori-com/satori-rtm-sdk-java/master/LICENSE'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'satorisdk'
                            organization = 'Satori Worldwide, Inc.'
                            organizationUrl 'https://www.satori.com'
                            roles { role 'developer' }
                        }
                    }
                }

                pom.whenConfigured { p ->
                    // Gradle could include satori-rtm-sdk-core' dependencies with 'compile' and
                    // 'test' scope to pom.xml. Remove one of them if we detect this case.
                    def numberOfCoreDeps = p.dependencies.findAll { dep ->
                        dep.artifactId == 'satori-rtm-sdk-core'
                    }
                    if (1 < numberOfCoreDeps.size()) {
                        p.dependencies.removeAll { dep ->
                            dep.artifactId == 'satori-rtm-sdk-core' && dep.scope == 'test'
                        }
                    }
                }
            }
        }
    }
}

release {
    preTagCommitMessage = "Pre-tag commit: "
    tagCommitMessage = "Creating tag: "
    newVersionCommitMessage = "New version commit: "
    tagTemplate = 'v${version}'
}

afterReleaseBuild.dependsOn subprojects.collect { it.tasks.findAll { it.name == 'uploadArchives' } }
